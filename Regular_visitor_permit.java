import java.time.LocalDate;

/* Generated by Together */

/**
 * For a description of Regular visitors, follow hyperlink to the Administration
 * use case for issuing a new Regular visitor permit.
 */
/**
 * @author Utente
 *
 */
public class Regular_visitor_permit extends Permit {
	/**
	 * The name of the University member hosting the visit.
	 */
	private String hostName;

	/**
	 * The date that the visit starts - entry will not be allowed before this date.
	 * 
	 * @label Starting on
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @link aggregation
	 * @directed
	 */
	private Date lnkDate;

	/**
	 * The date that the visit ends - entry will not be allowed after this date.
	 * 
	 * @label Ending on
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @link aggregation
	 * @directed
	 */
	private Date lnkDate1;

	/**
	 * This requires the name of the University member receiving the visitor, the
	 * name of the visitor (the permit holder), the visitor's vehicle registration
	 * numbers and the start and end dates on which the visits will occur. This
	 * category of visitor would be appropriate for, say, a researcher collaborating
	 * with someone in the University for a couple of weeks, or for actors appearing
	 * in a short-running production at the MacRobert Theatre. 
	 **/
	public Regular_visitor_permit(String permitHolder, Date startDate, Date endDate, String hostName) {
		// super( permitHolder, noOfEntries, warnings, suspended, enteredToday,
		// vehicleUsedToday, permittedVehicles);
		super(permitHolder);
		this.lnkDate = startDate;
		this.lnkDate1 = endDate;
		this.hostName = hostName;
	}

	/**
	 * Get the string with the information of a Permit
	 * 
	 * @return String: Information about the permit
	 */
	public String status() {
		String s = "Permit type: Regular Visitor Permit \n" + super.status() 
				+ "\n Hosted by: " + hostName + "between day #" + lnkDate.getDay() + " and day #" + lnkDate1.getDay();
		
		return s;
	}
	
	public void changeHostName(String s) {hostName = s;}

	/**
	 * Get host name
	 * 
	 * @return String: the host name
	 */
	public String getHostName() {return hostName; }
	

	/**
	 * Get start date
	 * 
	 * @return Date: the start date
	 */
	public Date getStartDate() { return lnkDate; }
	
	/**
	 * Change start Date
	 * 
	 * @param d the new start date
	 */
	public void changeStartDate(Date d) { lnkDate = d; }
	
	/** 
	 * Get end date
	 * 
	 * @return Date: end date
	 */
	public Date getEndDate() { return lnkDate1; }
		
	/**
	 * Change end date
	 * 
	 * @param d new end date
	 */
	public void changeEndDate(Date d) { 	lnkDate1 = d; }
	
	
	
	/**
	 * Check whether the permit is expired comparing today's date to the end date
	 * 
	 * @param today
	 * @return boolean: whether the permit is expired
	 */
	public boolean isExpired(Date today) { return  today.getDay() > lnkDate1.getDay();}
	
	 /**
  	 * Return whether the RVP permit is allowed to pass
  	 * @param v: the vehicle we are checking the permit of
  	 * @param today: today's date
  	 * @return boolean: whether the permit is expired
  	 */
	public boolean isAllowed(Vehicle_info v, Date today) {
		//If not allowed
    	if(!super.isAllowed(v, today))
    		return false;
    	//Check that start date is after today (or the same day), and end date is before todat (or the same day) 
    	if ((today.isEqual(lnkDate) || today.isAfter(lnkDate)) && (today.isEqual(lnkDate1) || today.isBefore(lnkDate1)))
    		return true;
    	return false;
    }
	
}
