import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class).
 *
 * The interface comprises one screen with all the functions present on it: they
 * could all be on view at once, or perhaps in alternative JPanels (in a JFrame
 * with JTabbedPane); the current date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for
 * each workstation in the office, with different staff carrying different
 * functions.
 *
 * The class implements Observer, and observes the system status so that it can
 * keep the displayed current date correct.
 * 
 * @stereotype boundary
 */
public class Administration_office extends JFrame implements Observer, ActionListener {
	/**
	 * Each instance of Administration_office has a navigable association to the
	 * permit list so that it can enquire about/add/delete/modify permits.
	 * 
	 * @supplierCardinality 1
	 * @clientCardinality 1..*
	 * @label Administration functions
	 * @directed
	 */
	private Permit_list lnkPermit_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * vehicle list so that it can enquire about/add/delete/modify vehicle details.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Administration functions
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * system status so that it can find out status information about the system.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label See date
	 * @directed
	 */
	private System_status lnkSystem_status;

	private JTabbedPane tb;

	// First Panel: Add Permit
	private JPanel addPermitPanel; // First panel

	private JComboBox cmbPermitList; // ComboBox with 4 permit type options

	private JLabel lblToday; // Today's label
	private JLabel lblPermitHolder; // Permit holder name label
	private JLabel lblRegNo; // Registration number label
	private JLabel lblIssueDate; // Date of Issue label
	private JLabel lblHostName; // Student name label
	private JLabel lblStartDate; // Start date label
	private JLabel lblEndDate; // End date label
	private JLabel lblMsg1;

	private JTextField tfPermitHolder; // text field to insert permit holder's name
	private JTextField tfRegNo; // text field to insert registration number of a vehicle, or more
	private JTextField tfIssueDate; // text field to insert date of issue
	private JTextField tfHostName; // text field to insert name of the university member
	private JTextField tfStartDate; // text field to insert start date
	private JTextField tfEndDate; // text field to insert end date

	private JButton addPermit; // Button to get the data from the text fields and create a permit

	// Second Panel: Record Warning
	private JPanel secondPanel; // Second panel

	private JComboBox cmbAddWarningList; // Combo box with amount of warnings to record

	private JLabel lblToday2; // Today's label
	private JLabel lblAddWarnPermitHolder; // Permit holder name label
	private JLabel lblRecordedWarnings; // recorded warnings label

	private JTextField tfAddWarnPermitHolder; // text field to insert permit holder's name

	private JButton addWarning; // Button to add warnings to a permit

	private int warningsToAdd = 1; // initial value of warnings to add, changes based on user option of the
									// combobox

	// Third panel: Delete warning
	private JPanel deleteWarningPanel; // Third panel

	private JComboBox cmbDeleteWarningList; // ComboBox with 3 options of amount of warnings to delete

	private JLabel lblToday3; // Today's label
	private JLabel lblPermitHolder3; // Permit holder name label
	private JLabel lblNumberSelectedFromCB; // Number selected from combo box
	private JLabel lblMsgDelete;

	private JButton deleteWarning; // Button to delete a certain amount of warnings
	private JButton deleteAllWarnings; // Button to delete all warnings

	private JTextField tfDelWarnPermitHolder; //// text field to insert permit holder's name

	private int warningsToDelete = 1; // initial value of warnings to delete, changes based on user option of the
										// combobox

	// Fourth panel: Cancel Permit
	private JPanel cancelPermitPanel;

	private JLabel lblToday4; // Today's label
	private JLabel lblCancelPermitHolderName;
	private JLabel lblMsgCancel;

	private JTextField tfCancelPermitHolderName;

	private JButton cancelPermit;

	// Status Panel
	private JLabel lblToday5;
	private JPanel statusMainPanel;
	private JTextField statusPermitHolder;
	private JButton statusSearch;
//	private JLabel statusInfo;
	private JTextArea statusInfo;
	// Modify Panel
	private JLabel lblToday6;
	private JPanel modifyPanel;
	private JLabel lblChangeStartDate;
	private JLabel lblChangeEndDate;
	private JLabel lblAllVehicles;
	private JTextField modifyPermitName;
	private JTextField modifynoOfEntries;
	private JTextField modifyWarnings;
	private JTextField modifyEnteredToday;
	private JTextField modifyVehicleInfo;
	private JTextField modifyStartDate;
	private JTextField modifyEndDate;
	private JButton updatePermit;
	private JButton searchPermit;
	private JButton addVehicle;
	private JButton removeVehicle;
	private JComboBox cmbPermitList2; // ComboBox with 4 permit type options

	String msg = "Permanent visitor";

	public Administration_office(System_status lnkSystem_status, Vehicle_list lnkVehicle_list,
			Permit_list lnkPermit_list) {
		this.lnkSystem_status = lnkSystem_status;
		this.lnkVehicle_list = lnkVehicle_list;
		this.lnkPermit_list = lnkPermit_list;

		setTitle("Administration");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout()); // The default is that JFrame uses BorderLayout
		setLayout(new GridLayout(1, 1));

		// Add Permit
		setFirstPanel();

		// Record Warning
		setSecondPanel();

		// Delete Warning
		setThirdPanel();

		// Cancel Permit
		setFourthPanel();

		// Status Enquiry
		setStatusPanel();

		// Modify Permit
		setModifyPermitPanel();

		tb = new JTabbedPane(JTabbedPane.TOP, JTabbedPane.SCROLL_TAB_LAYOUT);

		tb.addTab("Add Permit   ", addPermitPanel);
		tb.addTab("Record Warning", secondPanel);
		tb.addTab("Delete Warning", deleteWarningPanel);
		tb.addTab("Cancel Permit", cancelPermitPanel);
		tb.addTab("Status Enquiry", statusMainPanel);
		tb.addTab("Modify Permit", modifyPanel);
		// warnings.add("test", deleteWarningPanel);

		add(tb);
		setSize(800, 600);
		setVisible(true);
		setLocation(600, 300);
		lnkSystem_status.addObserver(this);
	}

	@Override
	public void update(Observable o, Object arg) {
		// display.setText("Days passed since 01/09: " + lnkSystem_status.getToday());
		lblToday.setText("                                           Today is:       " + lnkSystem_status.getToday());
		lblToday2.setText("                                           Today is:       " + lnkSystem_status.getToday());
		lblToday3.setText("                                           Today is:       " + lnkSystem_status.getToday());
		lblToday4.setText("                                           Today is:       " + lnkSystem_status.getToday());
		lblToday5.setText("                                           Today is:       " + lnkSystem_status.getToday());
		lblToday6.setText("                                           Today is:       " + lnkSystem_status.getToday());
		tfIssueDate.setText(" " + lnkSystem_status.getToday());
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// If clicking on the add permit panel
		if (e.getSource() == addPermit)
			newPermit();

		// If clicking on one of 4 types of permit in add permit panel
		if (e.getSource() == cmbPermitList)
			setPermit();

		// Amount of warnings to add
		if (e.getSource() == cmbAddWarningList)
			warningsToAdd = (int) cmbAddWarningList.getSelectedItem();

		if (e.getSource() == addWarning)
			addWarning();

		// Amount of warnings to delete
		if (e.getSource() == cmbDeleteWarningList)
			warningsToDelete = (int) cmbDeleteWarningList.getSelectedItem(); // sets the amount of warnings the
																				// user wants to delete
		// Delete warning(s)
		if (e.getSource() == deleteWarning)
			deleteWarning();

		// Delete all warnings
		if (e.getSource() == deleteAllWarnings)
			deleteAllWarnings();

		// Permanently cancel a permit
		if (e.getSource() == cancelPermit)
			cancelPermit();

		// Get the status of a Permit
		if (e.getSource() == statusSearch)
			statusSearch();

		// Retrieve permit details
		if (e.getSource() == searchPermit)
			searchPermit();

		// Manually update entries
		if (e.getSource() == updatePermit)
			updatePermit();

		// Add or remove a vehicle
		if (!modifyVehicleInfo.getText().isEmpty()) {
			String name = modifyPermitName.getText();
			if (e.getSource() == addVehicle) {
				newVehicle(lnkPermit_list.getPermit(name), modifyVehicleInfo.getText());
				lblAllVehicles.setText(lnkPermit_list.getPermit(name).getAllVehicles());
				modifyVehicleInfo.setText("");
			}
			if (e.getSource() == removeVehicle) {
				lnkPermit_list.getPermit(name).removePermittedVehicle(modifyVehicleInfo.getText());
				if (lnkVehicle_list.removeVehicle(modifyVehicleInfo.getText()))
					JOptionPane.showMessageDialog(null, "Vehicle has been removed");
				else
					JOptionPane.showMessageDialog(null, "This permit does not have this vehicle");
				lblAllVehicles.setText(lnkPermit_list.getPermit(name).getAllVehicles());
				modifyVehicleInfo.setText("");
			}
		}
	}

	/**
	 * Takes input and checks for an existing permit with that name, then displays
	 * permit information.
	 */
	private void statusSearch() {
		if (statusPermitHolder.getText().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Please enter a permit holder name");
		} else {
			if (lnkPermit_list.checkNameExists(statusPermitHolder.getText())) {
				statusInfo.setText(lnkPermit_list.getPermit(statusPermitHolder.getText()).status());
			} else {
				JOptionPane.showMessageDialog(null, "No permit registered to that name");
			}
		}
	}

	/**
	 * Takes all the information relating to the searched permit and displays to
	 * admin staff; admin staff can then update any information that is available
	 */
	private void updatePermit() {
		String name = modifyPermitName.getText();
		// checks to see if a name has been entered
		if (name.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Please enter a Permit Holder name");
		} else {
			// checks to see if there is a permit for entered name
			if (lnkPermit_list.checkNameExists(name)) {
				if (!modifynoOfEntries.getText().isEmpty()) {
					try {
						Integer.parseInt(modifynoOfEntries.getText());// try's to convert the string to an int
						// updates the amount of entries
						lnkPermit_list.getPermit(name).setEntries(Integer.parseInt(modifynoOfEntries.getText()));

					} catch (NumberFormatException e2) {
						JOptionPane.showMessageDialog(null, "No of entries must be a number");
					}
				}

				if (!modifyWarnings.getText().isEmpty()) {
					try {
						Integer.parseInt(modifyWarnings.getText());// try's to convert the string to an int

						// if statement checks the current number of warnings are below 3
						if (lnkPermit_list.getPermit(name).getWarnings() <= 3) {
							if (Integer.parseInt(modifyWarnings.getText()) <= 3) {
								lnkPermit_list.getPermit(name).setWarning(Integer.parseInt(modifyWarnings.getText()));
							}
						} else {
							JOptionPane.showMessageDialog(null, "Permit holder warnings cannot be more than 3");
						}
					} catch (Exception e2) {
						JOptionPane.showMessageDialog(null, "Warnings must be a number");
					}
				}
				if (!modifyEnteredToday.getText().isEmpty()) {
					if (modifyEnteredToday.getText().toLowerCase().equals("true")) {
						lnkPermit_list.getPermit(name).setEnteredToday();
					} else if (modifyEnteredToday.getText().toLowerCase().equals("false")) {
						lnkPermit_list.getPermit(name).setNotEnteredToday();
					} else {
						JOptionPane.showMessageDialog(null, "Entered today must be True or False");
					}
				}
				//Modifies the date depending on what type of permit
				if (!modifyStartDate.getText().isEmpty()) {
					if (lnkPermit_list.getPermit(name) instanceof Regular_visitor_permit) {
						((Regular_visitor_permit) lnkPermit_list.getPermit(name))
								.changeStartDate(new Date(Integer.parseInt(modifyStartDate.getText())));
					} else if (lnkPermit_list.getPermit(name) instanceof Day_visitor_permit) {
						((Day_visitor_permit) lnkPermit_list.getPermit(name))
								.changeDate(new Date(Integer.parseInt(modifyStartDate.getText())));
					} else if (lnkPermit_list.getPermit(name) instanceof University_member_permit) {
						((University_member_permit) lnkPermit_list.getPermit(name))
								.changeDate(new Date(Integer.parseInt(modifyStartDate.getText())));
					}
				}
				if (!modifyEndDate.getText().isEmpty()) {
					((Regular_visitor_permit) lnkPermit_list.getPermit(name))
							.changeEndDate(new Date(Integer.parseInt(modifyStartDate.getText())));
				}

			} else {
				JOptionPane.showMessageDialog(null, modifyPermitName.getText() + " is not a permit holder");
			}
		}
		JOptionPane.showMessageDialog(null,
				"Information for " + lnkPermit_list.getPermit(name).getName() + " has been updated");
		clearModifyInfo();
	}

	/**
	 * Searches for a permit entered in modify permit tab and checks to see what
	 * type of permit it is then displays relevant information.
	 */
	private void searchPermit() {
		String name = modifyPermitName.getText();
		if (name.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Please enter a Permit Holder name");
		} else if (lnkPermit_list.checkNameExists(name)) {
			lblAllVehicles.setText(lnkPermit_list.getPermit(name).getAllVehicles());
			modifyPermitName.setBorder(null);
			if (lnkPermit_list.getPermit(name) instanceof Regular_visitor_permit) {
				setModifyInfoRVP(name);
			} else if (lnkPermit_list.getPermit(name) instanceof Permanent_visitor_permit) {
				setModifyInfoPVP(name);
			} else if (lnkPermit_list.getPermit(name) instanceof Day_visitor_permit) {
				setModifyInfoDVP(name);
			} else if (lnkPermit_list.getPermit(name) instanceof University_member_permit) {
				setModifyInfoUMP(name);
			}
		} else {
			JOptionPane.showMessageDialog(null, "No permit with that Name");
		}
	}

	/**
	 * Adds a warning to a  specific permit
	 */
	private void addWarning() {
		if (lnkPermit_list.getPermit(tfAddWarnPermitHolder.getText()) != null) {
			int amountOfWarnings = 0;
			String permitHolder = tfAddWarnPermitHolder.getText();
			amountOfWarnings = lnkPermit_list.getPermit(permitHolder).getWarnings();
			if (amountOfWarnings == 3)
				JOptionPane.showMessageDialog(null,
						"Warnings not added, permit holder has already 3 warnings, and is already suspended.");

			else if (amountOfWarnings + warningsToAdd > 3)
				JOptionPane.showMessageDialog(null,
						"The maximum warnings for a permit is 3! The permit holder has now 3 permits, and is suspended");
			else {
				System.out.println(warningsToAdd);
				for (int i = warningsToAdd; i > 0; i--) {
					lnkPermit_list.getPermit(permitHolder).addWarning();
				}
				JOptionPane.showMessageDialog(null,
						"Warnings added succesfully! Name: " + lnkPermit_list.getPermit(permitHolder).getName()
								+ "; warnings: " + lnkPermit_list.getPermit(permitHolder).getWarnings());
//				lblMsgDelete.setText("Warnings added succesfully! Name: " + lnkPermit_list.getPermit(permitHolder).getName() + "; warnings: " + lnkPermit_list.getPermit(permitHolder).getWarnings());
				tfAddWarnPermitHolder.setText("");
			}

			if (amountOfWarnings == 3)
				lnkPermit_list.getPermit(permitHolder).suspend(); // suspend permit if it reaches 3 warnings
		} else
			JOptionPane.showMessageDialog(null, "Warnings not added, invalid permit holder name entered.");
	}

	/**
	 * deletes a specific amount of waring from the permit
	 */
	private void deleteWarning() {
		if (lnkPermit_list.getPermit(tfDelWarnPermitHolder.getText()) != null) {
			int amountOfWarnings = 0;
			String permitHolder = tfDelWarnPermitHolder.getText();
			amountOfWarnings = lnkPermit_list.getPermit(permitHolder).getWarnings();
			if (amountOfWarnings == 0)
				lblMsgDelete.setText("Warnings not removed, permit holder has no warnings.");

			else if (amountOfWarnings < warningsToDelete)
				lblMsgDelete.setText("Warnings not removed, permit holder has less warnings(" + amountOfWarnings
						+ ")  than selected(" + warningsToDelete + ").");

			else {
				lnkPermit_list.getPermit(permitHolder).deleteWarning(warningsToDelete);
				lnkPermit_list.getPermit(permitHolder).unsuspend();
				lblMsgDelete.setText("Warnings removed succesfully!");
				tfDelWarnPermitHolder.setText("");
			}
		} else
			JOptionPane.showMessageDialog(null, "Warnings not removed, invalid permit holder name entered.");
	}

	/**
	 * cancels a specific permit
	 */
	private void cancelPermit() {
		if (lnkPermit_list.getPermit(tfCancelPermitHolderName.getText()) != null) {
			System.out.println("canceling permit");
			lnkPermit_list.removePermit(tfCancelPermitHolderName.getText());
			lblMsgCancel.setText("Permit cancelled succesfully!");
			tfCancelPermitHolderName.setText("");
		} else {
			lblMsgCancel.setText("Permit not cancelled succesfully, incorrect permit holder name entered.");
		}
	}

	/**
	 * deletes all warnings for specific permit
	 */
	private void deleteAllWarnings() {
		if (lnkPermit_list.getPermit(tfDelWarnPermitHolder.getText()) != null) {
			String permitHolder = tfDelWarnPermitHolder.getText();
			if (lnkPermit_list.getPermit(permitHolder).getWarnings() > 0) {
				lnkPermit_list.getPermit(permitHolder).clearWarnings();
				lblMsgDelete.setText("All warnings removed succesfully!");
				tfDelWarnPermitHolder.setText("");
			} else {
				lblMsgDelete.setText("Warnings not removed, permit holder has no warnings.");
			}
		} else {
			lblMsgDelete.setText("Warnings not removed, invalid permit holder name entered.");
		}
	}

	private void setPermit() {
		// Day Visitor", "Regular visitor", "Permanent visitor", "University member
		msg = cmbPermitList.getSelectedItem().toString();
		switch (msg) {
		case "Day Visitor":
			setDVP();
			break;
		case "Regular visitor":
			setRVP();
			break;
		case "Permanent visitor":
			setPVP();
			break;
		case "University member":
			setUMP();
			break;
		}

	}
	
	
	private void newPermit() {
		switch (msg) {
		case "Day Visitor":
			newDVP();
			cleanTFP1();
			break;
		case "Regular visitor":
			newRVP();
			cleanTFP1();
			break;
		case "Permanent visitor":
			newPVP();
			cleanTFP1();
			break;
		case "University member":
			newUMP();
			cleanTFP1();
			break;
		}

	}

	/**
	 * creates a new university member permit
	 */
	public void newUMP() {
		if (tfPermitHolder.getText().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Holder name must not be empty");
		} else {
			String name = tfPermitHolder.getText();
			if (lnkPermit_list.checkNameExists(name)) {
				JOptionPane.showMessageDialog(null, "Holder name already exsist");
			} else {
				Date today = new Date(lnkSystem_status.getToday());
//				lnkPermit_list.createUMP(name, today);
				University_member_permit ump = new University_member_permit(name, today);
				lnkPermit_list.addPermit(ump);
				if (!tfRegNo.getText().isEmpty()) {
					newVehicle(ump, tfRegNo.getText());
				} else {
					JOptionPane.showMessageDialog(null, "Must have atleast one registration number");

				}
			}

		}
	}

	/**
	 * creates a regular visitor permit
	 */
	public void newRVP() {
		if (tfPermitHolder.getText().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Holder name must not be empty");
		} else {
			String name = tfPermitHolder.getText();
			if (lnkPermit_list.checkNameExists(name)) {
				JOptionPane.showMessageDialog(null, "Holder name already exsist");
			} else {
				if (isInt(tfStartDate.getText()) && isInt(tfEndDate.getText())) {
					Date startDate = new Date(Integer.parseInt(tfStartDate.getText()));
					Date endDate = new Date(Integer.parseInt(tfEndDate.getText()));
					if (!startDate.isBefore(endDate)) {
						JOptionPane.showMessageDialog(null,
								"This is not a time machine, end date should come after start date");
					} else {
//						lnkPermit_list.createRVP(name, startDate, endDate, name);
						Regular_visitor_permit rvp = new Regular_visitor_permit(name, startDate, endDate, name);
						lnkPermit_list.addPermit(rvp);
						lblMsg1.setText("Regular visitor permit added susccesfully");
						if (!tfRegNo.getText().isEmpty())
							newVehicle(rvp, tfRegNo.getText());
						// The lines below should be modified since you could create a permit without a
						// vehicle
						// It should check whether the vehicle already exists in another permit before
						// being added
					}
				} else
					JOptionPane.showMessageDialog(null, "Entered Date(s) are not a valid day number [1 - 365]");

			}

		}
	}

	/**
	 * creates a new permanent visitor permit
	 */
	public void newPVP() {
		if (tfPermitHolder.getText().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Holder name must not be empty");
		} else {
			String name = tfPermitHolder.getText();
			if (lnkPermit_list.checkNameExists(name)) {
				JOptionPane.showMessageDialog(null, "Holder name already exsist");
			} else {
				Permanent_visitor_permit pvp = new Permanent_visitor_permit(name);
				lnkPermit_list.addPermit(pvp); // Add permit to list of permits
//				lnkPermit_list.createPVP(name);
				lblMsg1.setText("Permanent visitor permit added susccesfully");
				if (!tfRegNo.getText().isEmpty())
					newVehicle(pvp, tfRegNo.getText());
			}
		}
	}

	/**
	 * creates a new day visitor permit
	 */
	public void newDVP() {
		if (tfPermitHolder.getText().isEmpty()) {
			JOptionPane.showMessageDialog(null, "Permit holder name must not be empty");
		} else { // Permit holder name is not empty

			String name = tfPermitHolder.getText();
			if (lnkPermit_list.checkNameExists(name)) {
				JOptionPane.showMessageDialog(null, "Permit holder name already exists");
			} else { // Permit holder name is not found in permit list

				if (isInt(tfStartDate.getText())) { // If date is an integer
					Date startDate = new Date(Integer.parseInt(tfStartDate.getText()));

					if (tfHostName.getText().isEmpty()) {
						JOptionPane.showMessageDialog(null, "Host name cannot be empty");
					} else {
						String hostName = tfHostName.getText();
//						lnkPermit_list.createDVP(name, startDate, name);
						Day_visitor_permit dvp = new Day_visitor_permit(name, startDate, hostName);
						lnkPermit_list.addPermit(dvp);
						// JOptionPane.showMessageDialog(null,"Regular visitor permit added
//										lblMsg1.setText("Regular visitor permit added susccesfully");
						if (!tfRegNo.getText().isEmpty())
							newVehicle(dvp, tfRegNo.getText());
					} // end else statement
				} else
					JOptionPane.showMessageDialog(null, "Entered Date(s) are not a valid day number [1 - 365]");
			}

		}
	}

	/**
	 * takes and a permit and the vehicles to be added to the permit. splits the
	 * vehicles up and the adds them to the permit.
	 */
	public void newVehicle(Permit p, String vehicles) {
		String name = p.getName();
		String vehicleNames = vehicles;
		String str = vehicleNames;
		str = str.replace(" ", "");
		String[] arrOfStr = str.split(",");
		String existingVehicles = "";
		for (String v : arrOfStr) {
			if (!lnkVehicle_list.isRegistered(v) && !v.equals("")) {
				Vehicle_info vehicle = new Vehicle_info(v, p); // Create vehicle

				lnkPermit_list.getPermit(name).addPermittedVehicle(vehicle); // Add vehicle to list of permitted
																				// vehicles of permit p
				lnkVehicle_list.addVehicle(vehicle); // Add vehicle to vehicle_list hashtable
			} else {
				existingVehicles += v + ", ";
			}
		} // end for loop
		if (existingVehicles.length() > 0)
			JOptionPane.showMessageDialog(null,
					"These vehicles could not be added, since they are already registered : " + existingVehicles);
	}

	// Set university member permit labels and text fields
	public void setUMP() {
		// Set UMP visible
		lblIssueDate.setVisible(true);
		tfIssueDate.setVisible(true);

		// Hide UMP
		lblHostName.setVisible(false);
		tfHostName.setVisible(false);
		lblStartDate.setVisible(false);
		tfStartDate.setVisible(false);
		lblEndDate.setVisible(false);
		tfEndDate.setVisible(false);
	}

	// Set Regular visitor permit labels and text fields
	public void setRVP() {
		// Make RVP visible
		lblHostName.setVisible(true);
		tfHostName.setVisible(true);
		lblStartDate.setVisible(true);
		tfStartDate.setVisible(true);
		lblEndDate.setVisible(true);
		tfEndDate.setVisible(true);

		// Hide UMP
		lblIssueDate.setVisible(false);
		tfIssueDate.setVisible(false);
	}

	// Set Permanent visitor permit labels and text fields
	public void setPVP() {

		// Hide UMP
		lblIssueDate.setVisible(false);
		tfIssueDate.setVisible(false);
		// Hide RVP
		lblHostName.setVisible(false);
		tfHostName.setVisible(false);
		lblStartDate.setVisible(false);
		tfStartDate.setVisible(false);
		lblEndDate.setVisible(false);
		tfEndDate.setVisible(false);
	}

	// Set Day visitor permit labels and text fields
	public void setDVP() {

		lblHostName.setVisible(true);
		tfHostName.setVisible(true);
		lblStartDate.setVisible(true);
		tfStartDate.setVisible(true);
		// Hide UMP
		lblIssueDate.setVisible(false);
		tfIssueDate.setVisible(false);
		// Hide RVP
		lblEndDate.setVisible(false);
		tfEndDate.setVisible(false);
	}

	/**
	 * sets up the layout and labels for the add permit panel
	 */
	public void setFirstPanel() {
		GridLayout experimentLayout = new GridLayout(0, 2);
		addPermitPanel = new JPanel();
		addPermitPanel.setLayout(experimentLayout);

		String[] permitTypes = { "Day Visitor", "Regular visitor", "Permanent visitor", "University member" };
		cmbPermitList = new JComboBox(permitTypes);
		cmbPermitList.setSelectedIndex(2);
		cmbPermitList.addActionListener(this);
		addPermitPanel.add(cmbPermitList);

		lblToday = new JLabel(
				"                                           Today is:       " + lnkSystem_status.getToday());
		lblToday.setFont(lblToday.getFont().deriveFont(15f));
		lblToday.setForeground(Color.red);
		lblToday.setOpaque(true);
		addPermitPanel.add(lblToday);

		// label and textfield for permit holder name
		lblPermitHolder = new JLabel("Permit Holder Name:");
		tfPermitHolder = new JTextField("", 25);

		addPermitPanel.add(lblPermitHolder);
		addPermitPanel.add(tfPermitHolder);

		// label and textfield for registration number
		lblRegNo = new JLabel("Registration #:");
		tfRegNo = new JTextField("", 10);
		addPermitPanel.add(lblRegNo);
		addPermitPanel.add(tfRegNo);

		// University member permit

		// label and textfield for a University member permit
		lblIssueDate = new JLabel("Date of issue:");
		tfIssueDate = new JTextField("" + lnkSystem_status.getToday(), 3);
		addPermitPanel.add(lblIssueDate);
		addPermitPanel.add(tfIssueDate);
		lblIssueDate.setVisible(false);
		tfIssueDate.setVisible(false);
//		tfIssueDate.setEnabled(false);
		tfIssueDate.setEditable(false);

		// Regular Visitor Permit

		// label and textfield for a Regular Visitor Permit
		lblHostName = new JLabel("Name of the university member hosting the visit:");
		tfHostName = new JTextField("", 20);
		addPermitPanel.add(lblHostName);
		addPermitPanel.add(tfHostName);
		lblHostName.setVisible(false);
		tfHostName.setVisible(false);

		// label and textfield for a Regular Visitor Permit
		lblStartDate = new JLabel("Start Date:");
		tfStartDate = new JTextField("", 3);
		addPermitPanel.add(lblStartDate);
		addPermitPanel.add(tfStartDate);
		lblStartDate.setVisible(false);
		tfStartDate.setVisible(false);

		// label and textfield for a Regular Visitor Permit
		lblEndDate = new JLabel("End Date:");
		tfEndDate = new JTextField("", 3);
		addPermitPanel.add(lblEndDate);
		addPermitPanel.add(tfEndDate);
		lblEndDate.setVisible(false);
		tfEndDate.setVisible(false);

		addPermit = new JButton("Add permit");
		addPermit.addActionListener(this);
		addPermitPanel.add(addPermit);

		lblMsg1 = new JLabel("");
		addPermitPanel.add(lblMsg1);
	}

	/**
	 * sets up the layout and the labels for the record warning panel
	 */
	public void setSecondPanel() {
		GridLayout experimentLayout = new GridLayout(0, 2);
		secondPanel = new JPanel();
		secondPanel.setSize(100, 5);
		secondPanel.setLayout(experimentLayout);

		JLabel empty = new JLabel("");
		secondPanel.add(empty);

		lblToday2 = new JLabel(
				"                                           Today is:       " + lnkSystem_status.getToday());
		lblToday2.setFont(lblToday.getFont().deriveFont(15f));
		lblToday2.setForeground(Color.red);
		lblToday2.setOpaque(true);
		secondPanel.add(lblToday2);

		lblAddWarnPermitHolder = new JLabel("Permit Holder Name: ");
		secondPanel.add(lblAddWarnPermitHolder);
		tfAddWarnPermitHolder = new JTextField("", 3);
		secondPanel.add(tfAddWarnPermitHolder);
		lblRecordedWarnings = new JLabel("Select # of warnings");
		secondPanel.add(lblRecordedWarnings);

		Integer[] amountOfWarningsToAdd = { 1, 2, 3 };
		cmbAddWarningList = new JComboBox(amountOfWarningsToAdd);
		cmbAddWarningList.setSelectedIndex(0);
		cmbAddWarningList.addActionListener(this);
		secondPanel.add(cmbAddWarningList);

		addWarning = new JButton("Add Warning");
		addWarning.addActionListener(this);
		secondPanel.add(addWarning);
		// tfPermitHolder = new JTextField("", 25);

		for (int i = 0; i < 10; i++)
			secondPanel.add(new JLabel(""));

	}

	/**
	 * sets the layout and labels for the delete warning panel
	 */
	public void setThirdPanel() {
		GridLayout experimentLayout = new GridLayout(0, 2);
		deleteWarningPanel = new JPanel();
		deleteWarningPanel.setSize(100, 5);
		deleteWarningPanel.setLayout(experimentLayout);
		// label and textfield for permit holder name

		JLabel empty = new JLabel("");
		deleteWarningPanel.add(empty);

		lblToday3 = new JLabel(
				"                                           Today is:       " + lnkSystem_status.getToday());
		lblToday3.setFont(lblToday3.getFont().deriveFont(15f));
		lblToday3.setForeground(Color.red);
		lblToday3.setOpaque(true);
		deleteWarningPanel.add(lblToday3);

		lblPermitHolder3 = new JLabel("Permit Holder Name:");
		tfDelWarnPermitHolder = new JTextField("", 25);

		lblNumberSelectedFromCB = new JLabel("Select # of warnings");
		deleteWarningPanel.add(lblNumberSelectedFromCB);
		Integer[] amountOfWarningsToDelete = { 1, 2, 3 };
		cmbDeleteWarningList = new JComboBox(amountOfWarningsToDelete);
		cmbDeleteWarningList.setSelectedIndex(0);
		cmbDeleteWarningList.addActionListener(this);

		deleteWarningPanel.add(cmbDeleteWarningList);
		deleteWarningPanel.add(lblPermitHolder3);
		deleteWarningPanel.add(tfDelWarnPermitHolder);

		deleteWarning = new JButton("Delete warning");
		deleteWarning.addActionListener(this);
		deleteWarningPanel.add(deleteWarning);

		deleteAllWarnings = new JButton("Delete ALL warnings");
		deleteAllWarnings.addActionListener(this);
		deleteWarningPanel.add(deleteAllWarnings);

		lblMsgDelete = new JLabel("");
		deleteWarningPanel.add(lblMsgDelete);

		for (int i = 0; i < 10; i++) {
			deleteWarningPanel.add(new JLabel(""));
		}
	}

	/**
	 * sets the layout and labels for cancel permit panel
	 */
	public void setFourthPanel() {
		GridLayout experimentLayout = new GridLayout(0, 2);

		cancelPermitPanel = new JPanel();
		cancelPermitPanel.setSize(100, 5);
		cancelPermitPanel.setLayout(experimentLayout);
		// label and textfield for permit holder name

		JLabel empty = new JLabel("");
		cancelPermitPanel.add(empty);

		lblToday4 = new JLabel(
				"                                           Today is:       " + lnkSystem_status.getToday());
		lblToday4.setFont(lblToday4.getFont().deriveFont(15f));
		lblToday4.setForeground(Color.red);
		lblToday4.setOpaque(true);
		cancelPermitPanel.add(lblToday4);

		lblCancelPermitHolderName = new JLabel("Permit Holder Name:");

		tfCancelPermitHolderName = new JTextField("", 25);
		tfCancelPermitHolderName.setSize(30, 30);

		cancelPermitPanel.add(lblCancelPermitHolderName);
		cancelPermitPanel.add(tfCancelPermitHolderName);

		cancelPermit = new JButton("Cancel Permit");
		cancelPermit.addActionListener(this);
		cancelPermitPanel.add(cancelPermit);

		lblMsgCancel = new JLabel("");
		cancelPermitPanel.add(lblMsgCancel);

		for (int i = 0; i < 10; i++)
			cancelPermitPanel.add(new JLabel(""));

	}

	// Clean text fields panel 1
	public void cleanTFP1() {
		tfPermitHolder.setText("");
		tfRegNo.setText("");
//		tfIssueDate.setText("");
		tfHostName.setText("");
		tfStartDate.setText("");
		tfEndDate.setText("");
	}

	/**
	 * Checks a String value to make sure its an int value
	 */
	static boolean isInt(String s) {
		try {
			int i = Integer.parseInt(s);
			return true;
		} catch (NumberFormatException er) {
			return false;
		}
	}

	/**
	 * sets the layout and labels for the status panel
	 */
	public void setStatusPanel() {
		GridLayout mainLayout = new GridLayout(2, 1);
		statusMainPanel = new JPanel();
		statusMainPanel.setLayout(mainLayout);
		GridLayout infoLayout = new GridLayout(4, 2);
		JPanel statusPanelTop = new JPanel();
		statusPanelTop.setLayout(infoLayout);
		JPanel statusPanelBot = new JPanel();
		statusMainPanel.add(statusPanelTop);
		statusMainPanel.add(statusPanelBot);

		JLabel day = new JLabel("Day: ");
		lblToday5 = new JLabel(" " + lnkSystem_status.getToday());
		lblToday5.setFont(lblToday5.getFont().deriveFont(15f));
		lblPermitHolder = new JLabel("Permit Holder Name: ");
		statusPermitHolder = new JTextField("", 3);
		statusSearch = new JButton("Search");
		statusSearch.addActionListener(this);
		statusInfo = new JTextArea();

		statusPanelTop.add(day);
		statusPanelTop.add(lblToday5);
		statusPanelTop.add(lblPermitHolder);
		statusPanelTop.add(statusPermitHolder);
		statusPanelTop.add(statusSearch);
		statusPanelTop.add(new JLabel(""));
		statusPanelTop.add(new JLabel(" Permit Status:"));
		statusPanelBot.add(statusInfo);

	}

	/**
	 * sets the layout and labels for the modify permit panel
	 */
	public void setModifyPermitPanel() {
		modifyPanel = new JPanel();
		GridLayout infoLayout = new GridLayout(2, 1);
		modifyPanel.setLayout(infoLayout);
		GridLayout infoLayout2 = new GridLayout(0, 2);
		GridLayout infoLayout3 = new GridLayout(6, 2);
		JPanel modifyTopPanel = new JPanel();
		modifyTopPanel.setLayout(infoLayout3);
		JPanel modifyBotPanel = new JPanel();
		modifyBotPanel.setLayout(infoLayout2);

		String[] permitTypes2 = { "Day Visitor", "Regular visitor", "Permanent visitor", "University member" };
		cmbPermitList2 = new JComboBox(permitTypes2);
		cmbPermitList2.setSelectedIndex(2);
		cmbPermitList2.addActionListener(this);

		// creating and assigning all components
		lblToday6 = new JLabel(" " + lnkSystem_status.getToday());
		JLabel day = new JLabel("Day: ");
		lblPermitHolder = new JLabel("Permit Holder Name: ");
		modifyPermitName = new JTextField();
		JLabel lblmodifyNoOfEntries = new JLabel("No Of Entries: ");
		modifynoOfEntries = new JTextField();
		JLabel lblmodifyWarnings = new JLabel("Warnings : ");
		modifyWarnings = new JTextField();
		JLabel lblmodifyEnteredToday = new JLabel("Entered Today (True/False) : ");
		modifyEnteredToday = new JTextField();
		JLabel lbladdVehicleInfo = new JLabel("Permitted Vehicles: ");
		modifyVehicleInfo = new JTextField();
		lblAllVehicles = new JLabel();
		lblChangeStartDate = new JLabel(" Update Start Date: ");
		lblChangeStartDate.setVisible(false);
		lblChangeEndDate = new JLabel(" Update End Date: ");
		lblChangeEndDate.setVisible(false);
		modifyStartDate = new JTextField();
		modifyStartDate.setVisible(false);
		modifyEndDate = new JTextField();
		modifyEndDate.setVisible(false);
		updatePermit = new JButton("Update");
		updatePermit.addActionListener(this);
		searchPermit = new JButton("Search");
		searchPermit.addActionListener(this);
		addVehicle = new JButton("Add");
		addVehicle.addActionListener(this);
		removeVehicle = new JButton("remove");
		removeVehicle.addActionListener(this);

		modifyPanel.add(modifyTopPanel);
		modifyPanel.add(modifyBotPanel);
		modifyTopPanel.add(day);
		modifyTopPanel.add(lblToday6);
		modifyTopPanel.add(lblPermitHolder);
		modifyTopPanel.add(modifyPermitName);
		modifyTopPanel.add(searchPermit);
		modifyBotPanel.add(lblmodifyNoOfEntries);
		modifyBotPanel.add(modifynoOfEntries);
		modifyBotPanel.add(lblmodifyWarnings);
		modifyBotPanel.add(modifyWarnings);
		modifyBotPanel.add(lblmodifyEnteredToday);
		modifyBotPanel.add(modifyEnteredToday);
		modifyBotPanel.add(lblChangeStartDate);
		modifyBotPanel.add(modifyStartDate);
		modifyBotPanel.add(lblChangeEndDate);
		modifyBotPanel.add(modifyEndDate);
		modifyBotPanel.add(updatePermit);
		modifyBotPanel.add(new JLabel());
		modifyBotPanel.add(lbladdVehicleInfo);
		modifyBotPanel.add(lblAllVehicles);
		modifyBotPanel.add(modifyVehicleInfo);
		modifyBotPanel.add(new JLabel());
		modifyBotPanel.add(addVehicle);
		modifyBotPanel.add(removeVehicle);
	}

	/**
	 * shows the relevant information for regular visitor permit.
	 */
	private void setModifyInfoRVP(String name) {
		lblChangeStartDate.setVisible(true);
		modifyStartDate.setVisible(true);
		lblChangeEndDate.setVisible(true);
		modifyEndDate.setVisible(true);
		modifynoOfEntries.setText("" + lnkPermit_list.getPermit(name).getEntries());
		modifyWarnings.setText("" + lnkPermit_list.getPermit(name).getWarnings());
		modifyEnteredToday.setText("" + lnkPermit_list.getPermit(name).getEnteredToday());
		modifyStartDate.setText(
				String.valueOf(((Regular_visitor_permit) lnkPermit_list.getPermit(name)).getStartDate().getDay()));
		modifyEndDate.setText(
				String.valueOf(((Regular_visitor_permit) lnkPermit_list.getPermit(name)).getEndDate().getDay()));

	}

	/**
	 * shows the relevant information for a permanent visitor permit
	 */
	private void setModifyInfoPVP(String name) {
		lblChangeStartDate.setVisible(false);
		modifyStartDate.setVisible(false);
		lblChangeEndDate.setVisible(false);
		modifyEndDate.setVisible(false);
		modifynoOfEntries.setText("" + lnkPermit_list.getPermit(name).getEntries());
		modifyWarnings.setText("" + lnkPermit_list.getPermit(name).getWarnings());
		modifyEnteredToday.setText("" + lnkPermit_list.getPermit(name).getEnteredToday());

	}

	/**
	 * shows the relevant information for a day visitor permit
	 */
	private void setModifyInfoDVP(String name) {
		lblChangeStartDate.setVisible(true);
		modifyStartDate.setVisible(true);
		lblChangeEndDate.setVisible(false);
		modifyEndDate.setVisible(false);
		modifynoOfEntries.setText("" + lnkPermit_list.getPermit(name).getEntries());
		modifyWarnings.setText("" + lnkPermit_list.getPermit(name).getWarnings());
		modifyEnteredToday.setText("" + lnkPermit_list.getPermit(name).getEnteredToday());
		modifyStartDate
				.setText(String.valueOf(((Day_visitor_permit) lnkPermit_list.getPermit(name)).getVisitDate().getDay()));

	}

	/**
	 * shows the relevant information for a university member permit
	 */
	private void setModifyInfoUMP(String name) {
		lblChangeStartDate.setVisible(false);
		modifyStartDate.setVisible(false);
		lblChangeEndDate.setVisible(false);
		modifyEndDate.setVisible(false);
		modifynoOfEntries.setText("" + lnkPermit_list.getPermit(name).getEntries());
		modifyWarnings.setText("" + lnkPermit_list.getPermit(name).getWarnings());
		modifyEnteredToday.setText("" + lnkPermit_list.getPermit(name).getEnteredToday());
		modifyStartDate.setText(
				String.valueOf(((University_member_permit) lnkPermit_list.getPermit(name)).getIssueDate().getDay()));
	}

	/**
	 * clears all fields in modify permit tab
	 */
	private void clearModifyInfo() {
		modifyPermitName.setText("");
		modifynoOfEntries.setText("");
		modifyWarnings.setText("");
		modifyEnteredToday.setText("");
		modifyStartDate.setText("");
		modifyEndDate.setText("");
		modifyVehicleInfo.setText("");
		lblAllVehicles.setText("");
	}
}
