import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

/* Generated by Together */

/**
 * This represents a hypothetical clock set to produce a "new day" signal every midnight.
 *
 * In this emulation the signal can be triggered by a simple button all by itself in a JFrame.
 * The uses made of this timing signal are described in the Timer use case
 * diagram (hyperlinked from this class).
 *
 * There will only be a single instance of this class. It will maintain a current Date object,
 * incremented with each new day. The interface will always show the current date.
 *
 * @stereotype boundary
 */
public class Timer extends JFrame
					implements  ActionListener{
    /**
     * The Timer has a navigable association to the system status so that it can send the new
     * date each time that a new day starts.
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label It's a new day
     * @directed*/
    private System_status lnkSystem_status;

    /**
     * The Timer has a navigable association to the permit list so that it can send the new
     * date each time that a new day starts.
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label It's a new day
     * @directed
     */
    private Permit_list lnkPermit_list;

    /**
     * This attribute holds today's date.
     *
     * It is incremented every time a midnight "tick" occurs (by a click on the button in
     * the visible interface).
     *
     * The date is sent to the System_status every time that a tick occurs, so that it can
     * keep an up-to-date note of the date (for example for attaching to each entry in the log).
     *
     * The date is also sent to the Permit_list every time that a tick occurs so that tidying
     * up actions on the permits can be carried out - for example automatically cancelling expired permits.
     * @supplierCardinality 1
     * @clientCardinality 1
     * @link aggregation
     * @label Contains
     * @directed
     */
    private Date today;
    
    private JButton addDay;
    private JLabel display;
    
    public Timer(System_status lnkSystem_status, Permit_list lnkPermit_list) {
    	this.lnkSystem_status = lnkSystem_status;
    	this.lnkPermit_list = lnkPermit_list;
    	setTitle("Timer");
    	setDefaultCloseOperation(EXIT_ON_CLOSE);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());     // The default is that JFrame uses BorderLayout
        
        addDay = new JButton("Add day");
        addDay.setLocation(0, 0);
        window.add(addDay);
        addDay.addActionListener(this);
        
        display = new JLabel("");
        display.setText("Days passed since 01/09:  " + lnkSystem_status.getToday());
        add(display);
        
        setSize(250,100);
        setLocation(250, 100);
        setVisible(true);    
    }
    
    public void actionPerformed(ActionEvent e) {
    	if (e.getSource() == addDay) {
    		lnkSystem_status.nextDay();
    		today = lnkSystem_status.getDate();
    		lnkPermit_list.dailyUpdateAll(today);
    		//On the first day of the year update all permits
    		if (lnkSystem_status.getDate().getDay() == 1) lnkPermit_list.annualUpdateAll();
    		display.setText("Days passed since 01/09: " + lnkSystem_status.getToday());

    		lnkPermit_list.annualUpdateAll();
    		System.out.println("Timer--- Today is: Day #" + lnkSystem_status.getToday());
    	}
    }
}
