import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.JobAttributes;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener; // Added by Alessio
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.*;

/* Generated by Together */
//View Class
/**
 * The Campus security staff actually activate and deactivate the barriers,
 * enter warnings for vehicles breaching the parking regulations and monitor the
 * state of the barrier system. This class represents the interactive interface
 * to these functions. Information about these functions is in the Campus
 * security use case diagram (hyperlinked from this class). The interface
 * comprises one screen with the various functions present on it, all on view at
 * once since there aren't many. There could be several instances of this class:
 * one in the central security office, and one at each entrance to the
 * University (in a staffed booth). The class implements Observer, and observes
 * the system status so that it can keep the displayed information up to date
 * (current date, barriers active or not, log of entries through the barriers).
 * 
 * @stereotype boundary
 */
public class Campus_security extends JFrame implements Observer, ActionListener {
	/**
	 * Each instance of Campus_security has a navigable association to the vehicle
	 * list so that warnings can be recorded on the permit for vehicles that breach
	 * parking regulations. Note that this process goes via the vehicle list as the
	 * only information available about such a vehicle is its registration number.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Record warning
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Campus_security has a navigable association to the system
	 * status so that it can both find out status information about the system, and
	 * send controlling messages to the system status (to activate/deactivate the
	 * system).
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Control/monitor
	 * @directed
	 */
	// private Model aModel;
	private System_status lnkSystem_status;

	private JButton buttonActive;
	private JButton buttonInactive;
	private JButton buttonIssueWarning;
	private JButton checkLog;
	private JLabel display;
	private JLabel labelRegNo;
	private JTextField fieldRegNo;
	private JTextArea logArea;
	JScrollPane scroll;
	int date;

	public Campus_security(System_status lnkSystem_status, Vehicle_list lnkVehicle_list) {
		this.lnkSystem_status = lnkSystem_status;
		this.lnkVehicle_list = lnkVehicle_list;

		lnkSystem_status.addObserver(this);
		setTitle("CAMPUS SECURITY");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout()); // The default is that JFrame uses BorderLayout

		buttonActive = new JButton("Activate Barrier Systems");
		window.add(buttonActive);
		buttonActive.addActionListener(this);

		buttonInactive = new JButton("Deactivate Barrier Systems");
		window.add(buttonInactive);
		buttonInactive.addActionListener(this);
		buttonInactive.setEnabled(false);

		display = new JLabel("");
		display.setText("The barrier system is NOT active ");
		add(display);
		display.setFont(display.getFont().deriveFont(35f));

		labelRegNo = new JLabel("");
		labelRegNo.setText("Registration number: ");
		add(labelRegNo);
//		labelRegNo.setFont(labelRegNo.getFont().deriveFont(20f));

		fieldRegNo = new JTextField("", 10);
		add(fieldRegNo);
		fieldRegNo.requestFocusInWindow();

		buttonIssueWarning = new JButton("Issue warning");
		window.add(buttonIssueWarning);
		buttonIssueWarning.addActionListener(this);

		checkLog = new JButton("Check Log");
		window.add(checkLog);
		checkLog.addActionListener(this);

		date = lnkSystem_status.getToday();

		logArea = new JTextArea("Date: " + date + "\n\n", 20, 40);
		scroll = new JScrollPane(logArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
//		logArea.setEditable(false);
		window.add(scroll);
//		window.add(logArea);

		setSize(600, 500);
		setLocation(0, 250);
		setVisible(true);
	}

	@Override
	public void update(Observable o, Object arg) {
		if (lnkSystem_status.getSystemActive()) {
			display.setText("The barrier system is active ");
			buttonActive.setEnabled(false);
			buttonInactive.setEnabled(true);
		} else {
			display.setText("The barrier system is NOT active ");
			buttonActive.setEnabled(true);
			buttonInactive.setEnabled(false);
		}
		if (date != lnkSystem_status.getToday()) {
			date = lnkSystem_status.getToday();
			logArea.append("Date: " + date + "\n\n");
		}

	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == buttonActive) {
			lnkSystem_status.setActive(true);

		}
		if (e.getSource() == buttonInactive) {
			lnkSystem_status.setActive(false);

		}
		if (e.getSource() == buttonIssueWarning) {
			String reg = fieldRegNo.getText();
			// Issue warning, don't know how yet
			if (lnkVehicle_list.isRegistered(reg)) {
				lnkVehicle_list.getPermit(reg).addWarning();
				JOptionPane.showMessageDialog(null, "Wanring added to " + lnkVehicle_list.getPermit(reg).getName());
				if (lnkVehicle_list.getPermit(reg).getWarnings() >= 3) {
					JOptionPane.showMessageDialog(null, lnkVehicle_list.getPermit(reg).getName() + " now has three warnings and has been suspended");
				}
			} else {
				JOptionPane.showMessageDialog(null, "Vehicle is not registered");
			}

			fieldRegNo.setText("");
			fieldRegNo.requestFocusInWindow();
		}
		if (e.getSource() == checkLog) {
			//shows all logs
			logArea.append(lnkSystem_status.toString());
		}
	}

}
