import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener; // Added by Alessio
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTextField;

/* Generated by Together */
//View Class
/**
 * The Campus security staff actually activate and deactivate the barriers, enter warnings for
 * vehicles breaching the parking regulations and monitor the state of the barrier system.
 * This class represents the interactive interface to these functions.  Information about these
 * functions is in the Campus security use case diagram (hyperlinked from this class).
 * The interface comprises one screen with the various functions present on it, all on view at
 * once since there aren't many.
 * There could be several instances of this class: one in the central security office, and one
 * at each entrance to the University (in a staffed booth).
 * The class implements Observer, and observes the system status so that it can keep the displayed
 * information up to date (current date, barriers active or not, log of entries through the barriers).
 * @stereotype boundary
 */
public class Campus_security extends JFrame implements Observer, ActionListener {
    /**
     * Each instance of Campus_security has a navigable association to the vehicle list so that
     * warnings can be recorded on the permit for vehicles that breach parking regulations.
     * Note that this process goes via the vehicle list as the only information available about such a
     * vehicle is its registration number.
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Record warning
     * @directed
     */
    private Vehicle_list lnkVehicle_list;

    /**
     * Each instance of Campus_security has a navigable association to the system status so that it
     * can both find out status information about the system, and send controlling messages to the
     * system status (to activate/deactivate the system).
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Control/monitor
     * @directed*/
    //private Model aModel;
    private System_status lnkSystem_status;
    
    private JButton buttonActive;
    private JButton buttonInactive;
    private JTextField display;
    
    public Campus_security(System_status lnkSystem_status, Vehicle_list lnkVehicle_list) {
    	this.lnkSystem_status = lnkSystem_status;
    	this.lnkVehicle_list = lnkVehicle_list;
    	
    	lnkSystem_status.addObserver(this);
    	setTitle("CAMPUS SECURITY");
    	setDefaultCloseOperation(EXIT_ON_CLOSE);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());     // The default is that JFrame uses BorderLayout
        
        buttonActive = new JButton("Set active");
        window.add(buttonActive);
        buttonActive.addActionListener(this);
        
        display = new JTextField("No data", 20);
//        if (lnkSystem_status.getSystemActive()) 
//        	display.setText("The barrier system is active ");
//        else
        display.setText("The barrier system is NOT active " );
        add(display);
        
        setSize(400,200);
        setLocation(0, 200);
        setVisible(true);
    }

	@Override
	public void update(Observable o, Object arg) {
		if (lnkSystem_status.getSystemActive()) 
        	display.setText("The barrier system is active ");
        else
        	display.setText("The barrier system is NOT active " );
		// TODO Auto-generated method stub
		
	}
	  public void actionPerformed(ActionEvent e) {
	    	if (e.getSource() == buttonActive) {
	    		lnkSystem_status.setActive(true);
	    	}
	    }

    
}
