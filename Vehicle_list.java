import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;

import javax.swing.JOptionPane;

import com.sun.source.tree.WhileLoopTree;

/* Generated by Together */

/**
 * Vehicle list manages the collection of vehicles currently associated with
 * permits. It handles checks of whether vehicles are allowed through the
 * barriers, records warnings, and various other functions. Note that each
 * Vehicle_info object must have a unique registration number, to allow sensible
 * checking and recording of entries onto the campus (so a HashTable is probably
 * a good implementation of the collection, with registration number as key).
 *
 * There will only be one instance of this class.
 */
public class Vehicle_list {
	/**
	 * The Vehicle list maintains a collection of the known Vehicle_infos associated
	 * with all permits. This association must be implemented by an attribute
	 * holding a collection data structure (for example: array, hash table - the
	 * latter is recommended).
	 *
	 * Note that no two Vehicle_infos may have the same registration number (this
	 * information is not represented diagrammatically) - this is to guarantee
	 * consistency with the constraint that no vehicle is associated with more than
	 * one permit.
	 *
	 * Note that, given a registration number, the Vehicle_list can look up the
	 * appropriate Vehicle_info instance, and via that it can obtain the vehicle's
	 * permit information.
	 * 
	 * @associates Vehicle_info
	 * @label Contains
	 * @clientCardinality 1
	 * @supplierCardinality 0..*
	 * @directed
	 */
	private Hashtable<String, Vehicle_info> lnkVehicle;
	
	  /**
   	 * Constructor, create a hashtable with Vehicle_info as the object stored, and the registration number, a String, as the key
   	 */ 
	public Vehicle_list() {
		lnkVehicle = new Hashtable<String, Vehicle_info>();
	}

	 /**
  	 * Check whether there is a vehicle with that given registration number
  	 * 
  	 * @param regNo the registration number
  	 */  
	public boolean isRegistered(String regNo) { return (lnkVehicle.containsKey(regNo)); }

	 /**
  	 * Add a new vehicle to the vehicle list
  	 * 
  	 * @param v the vehicle to add
  	 */ 
	public void addVehicle(Vehicle_info v) { lnkVehicle.put(v.getRegNo(), v); }

	 /**
  	 * Remove a vehicle from the vehicle list
  	 * Return true if it was removed succesfully, i.e. if the vehicle existed
  	 * 
  	 * @param reg the key of the Vehicle_info to remove
  	 */ 
	public boolean removeVehicle(String reg) {
		if (lnkVehicle.containsKey(reg)) {
			lnkVehicle.remove(reg);
			return true;
		}
		return false;
	}

	 /**
  	 * Get the vehicle given its key
  	 * 
  	 * @param reg the key of the Vehicle_info to get
  	 */ 
	public Vehicle_info getVehicle(String regNo) { 	return lnkVehicle.get(regNo); }

	 /**
  	 * Return size of vehicle list, i.e. how many vehicles are there
  	 */ 
	public int getSize() {	return lnkVehicle.size(); }
	
	/**
  	 * Get a String of all vehicles' registration numbers
  	 */ 
	public String getAllVehicles() {
		ArrayList<String> allVehicles = new ArrayList<>();
		Enumeration<String> enms = lnkVehicle.keys();
		{
			while (enms.hasMoreElements()) {
				String enm = enms.nextElement();
				allVehicles.add(lnkVehicle.get(enm).getRegNo());
			}
		}
		Collections.reverse(allVehicles);
		return Arrays.toString(allVehicles.toArray()).replace("[", "").replace("]", "");
		// return allVehicles.toString();
	}	
}
