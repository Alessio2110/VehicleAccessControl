/* Generated by Together */

/**
 * For a description of Day visitors, follow hyperlink to the Administration use case for
 * issuing a new Day visitor permit.
 */
public class Day_visitor_permit extends Permit {
    /**
     * The name of the University member hosting the visit.
     */
    private String hostName;

    /**
     * The date that the visitor is visiting on - entry will be allowed on that date only.
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label Visiting on
     * @link aggregation
     * @directed
     */
    private Date lnkDate;
    
    /**
  	 * Day_visitor_permit Constructor
  	 */
    public Day_visitor_permit(String permitHolder, Date lnkDate, String hostName) {
    	super( permitHolder);
    	this.lnkDate = lnkDate;
    	this.hostName = hostName;
    }
    
    /**
  	 * Return the visit date
  	 */
    public Date getVisitDate() { return lnkDate; }
        
    /**
  	 * Change the visit date
  	 * 
  	 * @param hostName new host name
  	 */
    public void changeDate(Date lnkDate) { this.lnkDate = lnkDate;  }
   	
    /**
  	 * Change the host's name
  	 * 
  	 * @param hostName new host name
  	 */
    public void changeHostName(String hostName) { this.hostName = hostName; }
     	
    /**
  	 * Return whether the DVP permit is allowed to pass
  	 */
    public String getHostName() { return hostName;  }
   
    /**
  	 * Return whether the DVP permit is allowed to pass
  	 */
    public boolean isAllowed(Vehicle_info v, Date d) {
    	if(super.isAllowed(v, d) && d.isEqual(lnkDate))
    		return true;
    	
    	return false;
    }
    
    /**
  	 * Get the string with the information of a Permit
  	 */
  	public String status() {
  		String s = "Permit type: Day Visitor Permit \n" + super.status() 
  				+  " \n Hosted by: " + getHostName() +  ";  Date of visit: #" + lnkDate.getDay();
  		
  		return s;
  	}
  	
  	 /**
  	 * Return whether the permit is expired
  	 * 
  	 * @param today today's date is compared with the visit date
  	 */
    public boolean isExpired(Date today) { return  today.getDay() > lnkDate.getDay();}
}