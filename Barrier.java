import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

/* Generated by Together */

/**
 * This class represents the access control barriers.
 * Information about the barrier functions is in the Barrier use case diagram (hyperlinked from this class).
 * Although in reality this class will be realised by (programmable) hardware with a moveable
 * barrier, and a camera with a registration number recognition system, here the interface comprises
 * one screen with the various functions present on it, all on view at once since there aren't many.
 *
 * There will be a large word PASS or STOP on display at all times:
 * PASS when the barrier is up because the system is inactive or temporarily when a permitted vehicle
 * is being allowed through,
 * and STOP when the barrier is down.
 *
 * There will be a text field to enter the registration number read by the camera, and a button to
 * indicate that the number has been read and is ready for checking (and raising the barrier or not,
 * as appropriate).
 *
 * To simulate the passage of a vehicle through the raised barrier, there is another button to be clicked
 * to simulate when a buried electronic sensor indicates that the vehicle is now clear - the barrier can
 * then be lowered (unless, of course, the system has been deactivated by security staff in the interim...).
 *
 * There could be many instances of this class: one at each entrance lane to the University.
 * The class implements Observer, and observes the system status so that it can keep its activated/deactivated
 * status up to date.
 * @stereotype boundary
 */
public class Barrier extends JFrame implements Observer, ActionListener {
	/**
	 * Each instance of Barrier has a navigable association to the permit list so that when a vehicle's
	 * registration number has been recognized by the camera, the barrier can check whether to raise itself
	 * or not by checking the status of that vehicle's permit.
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Access permits
	 * @directed*/
	private Vehicle_list lnkVehicle_list;
	/**
	 * Each instance of Barrier has a navigable association to the system status so that it can check
	 * whether the barrier system as a whole is active or inactive, and so that it can send event messages
	 * to be recorded in the log.
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Fetch system status info
	 * @directed*/
	private System_status lnkSystem_status;
	/**
	 * This attribute indicates the active/inactive state of the barrier system - as notified by the
	 * system status when it changes (Barrier Observes System status). If false then the barrier must be up.
	 * If true then the barrier position is determined by attribute raised.
	 */
	private boolean active = false;

	/**
	 * If the barrier system is active, this attribute indicates whether the barrier is currently in
	 * its raised or lowered position. The position is controlled by the result of checking a registration number
	 * with the permitted vehicles list, and the "vehicle clear" button.
	 */
	private boolean raised = true;

	private Permit_list lnkPermit_list;
	
	private Date today;
	private String regNo = "";
	private JLabel passStopLabel;
	private JButton checkRegNo;
	private JButton vehicleClear;
	private JTextField registrationField;
	public Barrier(System_status lnkSystem_status, Vehicle_list lnkVehicle_list, Permit_list p_list) {
		this.lnkSystem_status = lnkSystem_status;
		this.lnkVehicle_list = lnkVehicle_list;
		this.lnkPermit_list = lnkPermit_list;

		setTitle("Barrier");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container window = getContentPane();
		window.setLayout(new FlowLayout());     // The default is that JFrame uses BorderLayout

		passStopLabel = new JLabel("PASS");
		window.add(passStopLabel);
		passStopLabel.setFont(passStopLabel.getFont().deriveFont(64f));
		passStopLabel.setBackground(Color.green);

		add(new JLabel("Registration number: "));

		registrationField = new JTextField("", 10);
		add(registrationField);

		checkRegNo = new JButton("Check Registration #");
		//        vehicleClear.setLocation(0, 0);
		window.add(checkRegNo);
		checkRegNo.addActionListener(this);
//		checkRegNo.setBounds(25 , 5 , 5, 5);
		checkRegNo.setEnabled(false);
		
		vehicleClear = new JButton("Vehicle clear");
		vehicleClear.setEnabled(false);
		vehicleClear.setLocation(0, 0);
		window.add(vehicleClear);
		vehicleClear.addActionListener(this);


		passStopLabel.setOpaque(true);
		setSize(250, 250);
		setVisible(true);
		setLocation(600, 0);
		lnkSystem_status.addObserver(this);
	}
	public void update(Observable o, Object arg) {
		today = lnkSystem_status.getDate();
		//	 Fetch (potentially) updated information and display it
		active = getActive();
		//setRaised(isAllowedThrough);
		raised = getRaised();
		if (!active) {//if the system is not active, the barrier MUST be raised
			setRaised(true);
			checkRegNo.setEnabled(false);
		} else {checkRegNo.setEnabled(true);}

		if (raised) { //No need to check if the system is active or not, since if it is not active the barrier is up, if it is active it only depends on the barrier position
			passStopLabel.setText("PASS");		
			passStopLabel.setBackground(Color.green);
		}
		else {
			passStopLabel.setText("STOP");
			passStopLabel.setBackground(Color.red);
		}
		

	} // update

	public void actionPerformed(ActionEvent e) {
		
		if (e.getSource() == checkRegNo) {
			regNo = registrationField.getText();
			Vehicle_info v = lnkVehicle_list.getVehicle(regNo);
			String permitHolder = v.getPermit().getName();
			boolean allowed = lnkPermit_list.getPermit(permitHolder).isAllowed(v,today);
			
//			if (lnkVehicle_list.isRegistered(regNo) == true && p_list.vehicleisSuspended(regNo) == true) {
			//It should check whether the system is active or inactive, if inactive PASS
			//It should check the date of permits with dates to check whether they are allowed to pass
			if (allowed) {
				setRaised(true); vehicleClear.setEnabled(true);
				passStopLabel.setText("PASS");		
				passStopLabel.setBackground(Color.green);
			}
			
		}
		if (e.getSource() == vehicleClear) {
			registrationField.setText("");
			setRaised(false);
			vehicleClear.setEnabled(false);
			passStopLabel.setText("STOP");
			passStopLabel.setBackground(Color.red);
		}
		}
		
	public void setRaised(boolean raised) {
		this.raised = raised;
	}

	public boolean getRaised() {
		return raised;
	}

	public boolean getActive(){
		return lnkSystem_status.getSystemActive();
	}

	public void getToday(){
		lnkSystem_status.getToday();
	}

	public boolean isAllowedThrough() {
		return true;
//		return lnkVehicle_list.isAllowed(regNo);
//		isAllowed in vehicle list doesn't really check much though
		//You should get the vehicles from vehicle list, take the name of the permit associated with that vehicle
		//Use that permit holder name to check in Permit list whether that permit is allowed to pass(suspended \/ another vehicle has eneteredtoday \/ dates)
	}
}