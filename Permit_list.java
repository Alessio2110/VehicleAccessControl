import java.util.Enumeration;
import java.util.LinkedList;

/* Generated by Together */

/**
 * Permit list manages the collection of permits currently issued and not yet cancelled (or expired).
 * It handles most of the use cases in the Administration section. Note that each Permit must have a
 * unique permit holder name (so a HashTable is probably a good implementation of the collection, with
 * permit holder name as key).
 *
 * There will only be one instance of this class.
 */
public class Permit_list {
    /** The Permit list maintains a collection of the Permits currently issued.
     *
     * This association must be implemented by an attribute holding a collection data structure (for
     * example: array, hash table - the latter is recommended).
     *
     * Note that no two Permits may have the same permit holder name (this information is not represented diagrammatically).
     * @associates Permit
     * @label Contains
     * @clientCardinality 1
     * @supplierCardinality 0..*
     * @directed*/
    private java.util.Hashtable<String, Permit> lnkPermit;
    
    /**
   	 * Constructor, create a hashtable with Permit as the object stored, and the permit holder name, a String, as the key
   	 */ 
    public Permit_list(){
    	lnkPermit = new java.util.Hashtable<String, Permit>();
    }
    
    /**
	 * Get the Permit object
	 * 
	 * @param permitHolder the permit holder name of the Permit object
	 */  
    public Permit getPermit(String permitHolder) { return lnkPermit.get(permitHolder); }
    	
    /**
  	 * Check whether there is a Permit with a given name
  	 * 
  	 * @param permitHolder the permit holder name of the Permit
  	 */  
    public boolean checkNameExists(String permitHolder) {  	return lnkPermit.containsKey(permitHolder); }
    
    /**
  	 * Permanently remove a permit from the permit list
  	 * 
  	 * @param permitHolder the name of the permit holder we want to delete from the permit list
  	 */  
    public void removePermit(String permitHolder) {
    	lnkPermit.remove(permitHolder);
    }
    
    /**
   	 * Get number of permits in permit list
   	 */  
    public int getSize() { 	return lnkPermit.size(); }
    
    /**
  	 * add a Permit to the permit list, this could be any of the four subclasses of Permit
  	 */  
    public void addPermit(Permit p) {
    	if (!checkNameExists(p.getName()))
    		lnkPermit.put(p.getName(), p);
    }
    
    /**
     * Make daily update on each permit in permit list
     */  
    public void dailyUpdateAll(Date d) {
    	Enumeration e = lnkPermit.elements();
    	while(e.hasMoreElements()) {
    		Permit p = (Permit) e.nextElement();
    		//If it is a RVP, check if it is expired. If so, remove it.
    		if (p instanceof Regular_visitor_permit) {
    			if (((Regular_visitor_permit) p).isExpired(d)) {
    				removePermit(p.getName());
    			}
    		}
    		//If it is a DVP, check if it is expired. If so, remove it.
    		else if (p instanceof Day_visitor_permit) {
    			if (((Day_visitor_permit) p).isExpired(d)) {
    				removePermit(p.getName());
    			}
    		}
    	//Daily reset for all permits which have not been removed
    	 p.dailyReset();
    	}
    }
    
    /**
   	 * Make annual update on each permit in permit list
   	 */  
    public void annualUpdateAll() {
    	Enumeration e = lnkPermit.elements();
    	while(e.hasMoreElements()) {
    		Permit p = (Permit) e.nextElement();
    		p.clearWarnings();
    		p.clearEntries();
    		}
    }
    
}
